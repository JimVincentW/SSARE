services:
  redis:
    image: redis:latest
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./core/configs/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - app_network

  main_core_app:
    build: 
      context: ./SSARE
      dockerfile: ./app/Dockerfile
    ports:
      - "8080:8080"
    networks:
      - app_network
    depends_on:
      - scraper_service
      - postgres_service
      - redis
    develop:
      watch:
        - action: sync
          path: .
          target: /app
        - action: rebuild
          path: .

  scraper_service:
    build: 
      context: ./SSARE
      dockerfile: ./scraper_service/Dockerfile
    ports:
      - "8081:8081"
    networks:
      - app_network
    develop:
      watch:
        - action: sync
          path: .
          target: /app
        - action: rebuild
          path: .
    depends_on:
      - redis
  
  qdrant_service:
    build: 
      context: ./SSARE
      dockerfile: ./qdrant_service/Dockerfile
    ports:
      - "6969:6969"
    networks:
      - app_network
    develop:
      watch:
        - action: sync
          path: .
          target: /app
        - action: rebuild
          path: .
      
  qdrant_storage:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
    volumes:
      - ./qdrant_service/qdrant_storage:/qdrant/data
    networks:
      - app_network

  postgres_db:
    image: postgres:latest
    environment:
      POSTGRES_DB: ssare_db
      POSTGRES_USER: hello
      POSTGRES_PASSWORD: world
    volumes:
      - ./core/sql_commands:/docker-entrypoint-initdb
      - ./data/postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app_network

  postgres_service:
    build: 
      context: ./SSARE
      dockerfile: ./postgres_service/Dockerfile
    ports:
      - "5434:5434"
    networks:
      - app_network
    develop:
      watch:
        - action: sync
          path: .
          target: /app
          ignore: 
            - requirements.txt
        - action: rebuild
          path: .
    depends_on:
      - redis
      - postgres_db
      
  nlp_service:
    build: 
      context: ./SSARE
      dockerfile: ./nlp_service/Dockerfile
    ports:
      - "0420:0420"
    networks:
      - app_network
    depends_on:
      - redis
      - postgres_service
    develop:
      watch:
        - action: sync
          path: .
          target: /app
        - action: rebuild
          path: .

  prefect_database:
    image: postgres:15.2-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=prefect
    volumes:
      - ./data/prefect_db:/var/lib/postgresql/data
      - ./data/prefect_db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app_network


  prefect_server:
    image: prefecthq/prefect:2-python3.11-conda
    restart: always
    volumes:
      - prefect:/root/.prefect
    entrypoint: ["/opt/prefect/entrypoint.sh", "prefect", "server", "start"]
    environment:
      - PREFECT_UI_URL=http://localhost:4200
      - PREFECT_API_URL=http://localhost:4200
      - PREFECT_SERVER_API_HOST=0.0.0.0
      - PREFECT_API_DATABASE_CONNECTION_URL=postgresql+asyncpg://postgres:postgres@prefect_database:5432/prefect
    ports:
      - "4200:4200"
    depends_on:
      - prefect_database
    networks:
      - app_network

  prefect_agent:
    image: prefecthq/prefect:2-python3.11-conda
    restart: always
    entrypoint: ["/opt/prefect/entrypoint.sh", "prefect", "agent", "start", "-q", "default"]
    environment:
      - PREFECT_API_URL=http://prefect_server:4200/api
    networks:
      - app_network

  prefect_cli:
    image: prefecthq/prefect:2.11.5-python3.11
    entrypoint: "tail -f /dev/null"
    working_dir: "/root/flows"
    volumes:
      - ./flows:/root/flows
    environment:
      - PREFECT_API_URL=http://prefect_server:4200/api
    networks:
      - app_network



networks:
  app_network:

volumes:
  postgres_data:
  prefect:
  prefect_db:
